from app.email_templates.verify_email import build_template_verify, build_template_reset
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, Optional
from app import schemas
from jose import jwt
import requests
from app.core.config import settings
from app.utils.api_logger import logzz

# 
# Connect with the Notifications API here
#  

def send_email(email: schemas.Email, token: str) -> None:   
   #Make this function the abstraction to the API Call
   # This function will be the interface anytime any emails need to be sent.

    '''
    I Need to come up with a more secure way to send requests from API to API

    send_email:
        THis function takes the Email object and makes a request to the Notification
        API.

        The EMail API Needs a token generated by this side to work. So use the same one?
    '''
    email_api_server = settings.EMAIL_API_SERVER
    url = f'{email_api_server}/api/v1/mail/send-email/'
    logzz.debug(url)
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    response = requests.request(
            "POST", 
            url, 
            headers=headers, 
            json=email.dict()
        )
    # Check the response to make sure all is well, If not log as error
    logzz.debug(f"Response from send_email() {response.json()}")

def verify_email(email_to: str, email_username: str, token: str) -> None:
    '''
       Send this user an email with a link to an endpoint that will:
       1. Update their is_verified field to True
       2. LOad the Login Page
    '''
    project_name = settings.PROJECT_NAME
    subject = f"{project_name} - Verify Email {email_username}"
    server_host = settings.SERVER_HOST

    link = f"{server_host}/verify-email?token={token}"
    #
    # I need to send the user an email via the notif service with the abpve link
    # 
    verify_Email = schemas.Email(
        email_to=email_to,
        email_from=settings.EMAIL_FROM,
        subject=subject,
        message=build_template_verify(link), # This is the HTML for the message
        user_id=email_username
    )

    # Connect to the Email API and send the email to this User.... They now have 24 hours 
    # to respond

    # I need a token to send to the email API... 
    send_email(verify_Email, token)

def send_reset_password_email(email_to: str, email_username: str, token: str) -> None:
    project_name = settings.PROJECT_NAME
    subject = f"{project_name} - Password recovery for user {email_username}"
    #with open(Path(settings.EMAIL_TEMPLATES_DIR) / "reset_password.html") as f:
    #    template_str = f.read()
    server_host = settings.SERVER_HOST

    link = f"{server_host}/reset-password?token={token}"
    #
    # I need to send the user an email via the notif service with the abpve link
    # 
    email_outgoing = schemas.Email(
        email_to=email_to,
        email_from=settings.EMAIL_FROM,
        subject=subject,
        message=build_template_reset(link), # This is the HTML for the message
        user_id=email_username
    )

    '''
    send_email(
        email_to=email_to,
        subject_template=subject,
        html_template=template_str,
        environment={
            "project_name": settings.PROJECT_NAME,
            "username": email,
            "email": email_to,
            "valid_hours": settings.EMAIL_RESET_TOKEN_EXPIRE_HOURS,
            "link": link,
        },
    )'''
    


def send_new_account_email(email_to: str, username: str, password: str) -> None:
    # I need to design an email foe verifying email account.
    # insert a link to clixk and when they ckick it, it goes to the users dashboard. 


    '''project_name = settings.PROJECT_NAME
    subject = f"{project_name} - New account for user {username}"
    with open(Path(settings.EMAIL_TEMPLATES_DIR) / "new_account.html") as f:
        template_str = f.read()
    link = settings.SERVER_HOST
    send_email(
        email_to=email_to,
        subject_template=subject,
        html_template=template_str,
        environment={
            "project_name": settings.PROJECT_NAME,
            "username": username,
            "password": password,
            "email": email_to,
            "link": link,
        },
    )
'''
    pass

def generate_password_reset_token(email: str) -> str:
    delta = timedelta(hours=settings.EMAIL_RESET_TOKEN_EXPIRE_HOURS)
    now = datetime.utcnow()
    expires = now + delta
    exp = expires.timestamp()
    encoded_jwt = jwt.encode(
        {"exp": exp, "nbf": now, "sub": email}, settings.API_KEY, algorithm="HS256",
    )
    return encoded_jwt


def verify_password_reset_token(token: str) -> Optional[str]:
    try:
        decoded_token = jwt.decode(token, settings.API_KEY, algorithms=["HS256"])
        return decoded_token["email"]
    except jwt.JWTError:
        return None
    

def generate_verifyemail_token() -> str:
    # VERIFY_EMAIL_EXPIRE_HOURS
    pass    